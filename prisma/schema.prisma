generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // Optional for OAuth users
  image         String?   // Add this line for profile pictures
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  submissions   Submission[]
  
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Your existing models remain the same
model Problem {
  id               Int      @id
  title            String
  titleSlug        String   @unique
  difficulty       Int
  
  submissions      Submission[]
  
  @@index([titleSlug])
  @@index([difficulty])
}

model Submission {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId       Int
  problem         Problem  @relation(fields: [problemId], references: [id])
  
  solvedAt        DateTime @default(now())
  timeSpent       Int?
  personalDifficulty Int?
  notes           String?  @db.Text
  solution        String?  @db.Text
  language        String   @default("javascript")
  
  lastReviewedAt  DateTime?
  nextReviewDate  DateTime?
  reviewCount     Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, problemId])
  @@index([nextReviewDate])
  @@index([solvedAt])
  @@index([userId])
}